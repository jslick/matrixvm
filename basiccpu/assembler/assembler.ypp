%{

#include "assembler_util.hpp"
#include "isa.hpp"
#include "program.hpp"

#include <stdio.h>
#include <string.h>
#include <getopt.h>

extern int yylineno;

extern void yyerror(const char*);
extern int yylex();

extern Options options;
extern Program program;

%}

%union {
    const char*     id;
    uint32_t        int32val;
    Instruction*    instruction;
    Argument*       arg;
    Argument*       arg_list;
}

%type <instruction> instruction
%type <id>          opcode
%type <arg>         instruction_arg   directive_arg
%type <arg_list>    instruction_args   directive_args
%type <arg>         immediate   addition_expr   mult_expr   simple_expr
%type <id>          register

%token NEWLINE
%token DB DD SPACE
%token DEFINE
%token R1 R2 R3 R4 R5 R6
%token CMP JMP JE CALL RET STI RTI MOV STR MEMCPY CLRSET CLRSETV READ WRITE HALT IDLE ADD MUL MULW
%token IMMEDIATE
%token <id> ID
%token <int32val> INTVAL
%token DBLVAL FLTVAL
%token <id> STRVAL
%token <int32val> CHARVAL

%%

program
    : line program2                 {   program.assemble(options.outputFile, options.debugFlag);
                                        cleanupArgs();
                                        cleanupStrings();
                                    }
    ;

program2
    : line program2
    |
    ;

line
    : label_dcl NEWLINE
    | directive_stmt NEWLINE
    | instruction NEWLINE
    | NEWLINE
    ;

label_dcl
    : ID ':'                        { addCurrentLabel($1); }
    ;

directive_stmt
    : DB directive_args             { addDataInstruction("db", $2); }
    | DD directive_args             { addDataInstruction("dd", $2); }
    | DEFINE ID immediate           { setSymbol($2, $3); }
    | SPACE immediate               { addDataInstruction("db", createBytes($2)); }
    ;

directive_args
    : directive_arg                 { $$ = $1; }
    | directive_args directive_arg  { $$ = appendArgument($1, $2); }
    ;

directive_arg
    : INTVAL                        { $$ = inventoryArgument( new DataArgument(std::vector<uint32_t>(1, $1)) ); }
    | STRVAL                        { $$ = inventoryArgument( new DataArgument(stringToVector($1, false /* don't ensure null */)) ); }
    ;

instruction
    : opcode instruction_args       { $$ = addInstruction($1, $2); }
    | opcode                        { $$ = addInstruction($1); }
    ;

opcode
    : CMP                           { $$ = "cmp"; }
    | JMP                           { $$ = "jmp"; }
    | JE                            { $$ = "je"; }
    | CALL                          { $$ = "call"; }
    | RET                           { $$ = "ret"; }
    | STI                           { $$ = "sti"; }
    | RTI                           { $$ = "rti"; }
    | MOV                           { $$ = "mov"; }
    | STR                           { $$ = "str"; }
    | MEMCPY                        { $$ = "memcpy"; }
    | CLRSET                        { $$ = "clrset"; }
    | CLRSETV                       { $$ = "clrsetv"; }
    | READ                          { $$ = "read"; }
    | WRITE                         { $$ = "write"; }
    | HALT                          { $$ = "halt"; }
    | IDLE                          { $$ = "idle"; }
    | ADD                           { $$ = "add"; }
    | MUL                           { $$ = "mul"; }
    | MULW                          { $$ = "mulw"; }
    ;

instruction_args
    : instruction_arg                       { $$ = $1; }
    | instruction_arg ',' instruction_args  { $$ = appendArgument($1, $3); }
    ;

instruction_arg
    : register                      { $$ = inventoryArgument( new RegisterArgument($1) ); }
    | immediate                     { $$ = $1; }
    ;

register
    : R1                            { $$ = "r1"; }
    | R2                            { $$ = "r2"; }
    | R3                            { $$ = "r3"; }
    | R4                            { $$ = "r4"; }
    | R5                            { $$ = "r5"; }
    | R6                            { $$ = "r6"; }
    ;

immediate
    : addition_expr                 { $$ = $1; }
    ;

addition_expr
    : addition_expr '+' mult_expr   { $$ = inventoryArgument( new BinaryArgument("+", $1, $3) ); }
    | addition_expr '-' mult_expr   { $$ = inventoryArgument( new BinaryArgument("-", $1, $3) ); }
    | mult_expr                     { $$ = $1; }
    ;

mult_expr
    : mult_expr '*' simple_expr     { $$ = inventoryArgument( new BinaryArgument("*", $1, $3) ); }
    | simple_expr
    ;

simple_expr
    : ID                            { $$ = inventoryArgument( new SymbolArgument($1) ); }
    | INTVAL                        { $$ = inventoryArgument( new IntegerArgument($1) ); }
    | CHARVAL                       { $$ = inventoryArgument( new IntegerArgument($1) ); }
    ;
%%

void yyerror(const char *str)
{
    fprintf(stderr,"error: %s\n",str);
}

void parseArgs(int argc, char** argv)
{
    int c;

    while (1)
    {
        static struct option long_options[] =
        {
            /* These options set a flag. */
            {"debug",   no_argument,       &options.debugFlag, 1},
            /* These options don't set a flag.
               We distinguish them by their indices. */
            {"outfile", required_argument, 0, 'o'},
            {0, 0, 0, 0}
        };
        /* getopt_long stores the option index here. */
        int option_index = 0;
        c = getopt_long(argc, argv, "o:", long_options, &option_index);
        /* Detect the end of the options. */
        if (c < 0)
            break;

        switch (c)
        {
        case 0:
            /* If this option set a flag, do nothing else now. */
            if (long_options[option_index].flag != 0)
                break;
            printf("option %s", long_options[option_index].name);
            if (optarg)
                printf(" with arg %s", optarg);
            printf("\n");
            break;

        case 'o':
            options.outputFilename = optarg;
            break;

        default:
            abort();
        }
    }

    if (optind < argc)
    {
        /* remaining command line arguments (not options) */
    }
}

int main(int argc, char** argv)
{
    parseArgs(argc, argv);

    bool openedFile = false;
    // init output file
    if (options.outputFilename)
    {
        options.outputFile = fopen(options.outputFilename, "wb");
        openedFile = true;
        if (!options.outputFile)
        {
            fprintf(stderr, "Could not open '%s' for writing\n", options.outputFilename);
            exit(2);
        }
    }
    else if (!options.outputFile)
        options.outputFile = stdout;

    int rv = yyparse();

    // cleanup
    if (openedFile)
        fclose(options.outputFile);

    return rv;
}
