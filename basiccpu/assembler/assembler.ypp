%{

#include "assembler_util.hpp"
#include "isa.hpp"
#include "program.hpp"

#include <stdio.h>
#include <string.h>

extern int yylineno;

extern void yyerror(const char*);
extern int yylex();

extern Program program;

%}

%union {
    const char*     id;
    uint32_t        int32val;
    Instruction*    instruction;
    Argument*       arg;
    Argument*       arg_list;
}

%type <instruction> instruction
%type <id>          opcode
%type <arg>         instruction_arg   directive_arg
%type <arg_list>    instruction_args   directive_args
%type <arg>         immediate   addition_expr   mult_expr   simple_expr
%type <id>          register

%token NEWLINE
%token DB
%token DEFINE
%token R1 R2 R3 R4 R5 R6
%token JMP CALL RET MOV MEMCPY CLRSET CLRSETV WRITE HALT ADD MUL MULW
%token IMMEDIATE
%token <id> ID
%token <int32val> INTVAL
%token DBLVAL FLTVAL
%token <id> STRVAL
%token CHARVAL

%%

program
    : line program2                 { program.assemble(stdout); cleanupArgs(); cleanupStrings(); }
    ;

program2
    : line program2
    |
    ;

line
    : label_dcl NEWLINE
    | directive_stmt NEWLINE
    | instruction NEWLINE
    | NEWLINE
    ;

label_dcl
    : ID ':'                        { addCurrentLabel($1); }
    ;

directive_stmt
    : DB directive_args             { addDataInstruction("db", $2); }
    | DEFINE ID immediate           { setSymbol($2, $3); }
    ;

directive_args
    : directive_arg                 { $$ = $1; }
    | directive_args directive_arg  { $$ = appendArgument($1, $2); }
    ;

directive_arg
    : INTVAL                        { $$ = inventoryArgument( new DataArgument(std::vector<uint8_t>(1, $1)) ); }
    | STRVAL                        { $$ = inventoryArgument( new DataArgument(stringToVector($1, false /* don't ensure null */, false /* don't pad to align */)) ); }
    ;

instruction
    : opcode instruction_args       { $$ = addInstruction($1, $2); }
    | opcode                        { $$ = addInstruction($1); }
    ;

opcode
    : JMP                           { $$ = "jmp"; }
    | CALL                          { $$ = "call"; }
    | RET                           { $$ = "ret"; }
    | MOV                           { $$ = "mov"; }
    | MEMCPY                        { $$ = "memcpy"; }
    | CLRSET                        { $$ = "clrset"; }
    | CLRSETV                       { $$ = "clrsetv"; }
    | WRITE                         { $$ = "write"; }
    | HALT                          { $$ = "halt"; }
    | ADD                           { $$ = "add"; }
    | MUL                           { $$ = "mul"; }
    | MULW                          { $$ = "mulw"; }
    ;

instruction_args
    : instruction_arg                       { $$ = $1; }
    | instruction_arg ',' instruction_args  { $$ = appendArgument($1, $3); }
    ;

instruction_arg
    : register                      { $$ = inventoryArgument( new RegisterArgument($1) ); }
    | immediate                     { $$ = $1; }
    ;

register
    : R1                            { $$ = "r1"; }
    | R2                            { $$ = "r2"; }
    | R3                            { $$ = "r3"; }
    | R4                            { $$ = "r4"; }
    | R5                            { $$ = "r5"; }
    | R6                            { $$ = "r6"; }
    ;

immediate
    : addition_expr                 { $$ = $1; }
    ;

addition_expr
    : addition_expr '+' mult_expr   { $$ = inventoryArgument( new BinaryArgument("+", $1, $3) ); }
    | addition_expr '-' mult_expr   { $$ = inventoryArgument( new BinaryArgument("-", $1, $3) ); }
    | mult_expr                     { $$ = $1; }
    ;

mult_expr
    : mult_expr '*' simple_expr     { $$ = inventoryArgument( new BinaryArgument("*", $1, $3) ); }
    | simple_expr
    ;

simple_expr
    : ID                            { $$ = inventoryArgument( new SymbolArgument($1) ); }
    | INTVAL                        { $$ = inventoryArgument( new IntegerArgument($1) ); }
    ;
%%

void yyerror(const char *str)
{
    fprintf(stderr,"error: %s\n",str);
}

int main()
{
    return yyparse();
}
